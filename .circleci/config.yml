# Configuration file anchors
docker-login: &docker-login
  # Login to DockerHub
  #
  # Nota bene: you'll need to define the following secrets environment vars
  # in CircleCI interface:
  #
  #   - DOCKER_HUB_USER
  #   - DOCKER_HUB_PASSWORD
  run:
    name: Login to DockerHub
    command: >
      test -n "$DOCKER_HUB_USER" &&
        echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USER" --password-stdin ||
        echo "Docker Hub anonymous mode"

version: 2.1
jobs:
  # Git jobs
  # Check that the git history is clean and complies with our expectations
  lint-git:
    docker:
      - image: cimg/python:3.11
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      # Make sure the changes don't add a "print" statement to the code base.
      # We should exclude the ".circleci" folder from the search as the very command that checks
      # the absence of "print" is including a "print(" itself.
      - run:
          name: enforce absence of print statements in code
          command: |
            ! git diff origin/main..HEAD -- . ':(exclude).circleci' | grep "print("
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log --pretty=format:%s | grep 'fixup!'
      - run:
          name: Install gitlint
          command: |
            pip install --user gitlint requests
      - run:
          name: lint commit messages added to main
          command: |
            ~/.local/bin/gitlint --commits origin/main..HEAD

  # Check that the CHANGELOG has been updated in the current branch
  check-changelog:
    docker:
      - image: cimg/base:current
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check that the CHANGELOG has been modified in the current branch
          command: |
            git whatchanged --name-only --pretty="" origin..HEAD | grep CHANGELOG

  # Check that the CHANGELOG max line length does not exceed 80 characters
  lint-changelog:
    docker:
      - image: debian:stretch
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check CHANGELOG max line length
          command: |
            # Get the longuest line width (ignoring release links)
            test $(cat CHANGELOG.md | grep -Ev "^\[.*\]: https://github.com/openfun" | wc -L) -le 80

  # ---- Docker jobs ----
  # Build the Docker image ready for production
  build-docker:
    docker:
      - image: cimg/base:current
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release & login to DockerHub
      - *docker-login
      # Activate docker-in-docker (with layers caching enabled)
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build development image
          command: make build
      - run:
          name: Check built image availability
          command: docker images "fundocker/obc:*"

  # ---- Library jobs ----
  # Build backend development environment
  build:
    parameters:
      python-image:
        type: string
    docker:
      - image: cimg/<< parameters.python-image >>
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-<< parameters.python-image >>-{{ .Revision }}
      - run:
          name: Install development dependencies
          command: pip install --user .[dev]
      - save_cache:
          paths:
            - ~/.local
          key: v1-dependencies-<< parameters.python-image >>-{{ .Revision }}

  lint:
    docker:
      - image: cimg/python:3.11
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-python:3.11-{{ .Revision }}
      - run:
          name: Lint code with flake8
          command: ~/.local/bin/flake8
      - run:
          name: Lint code with isort
          command: ~/.local/bin/isort --check-only .
      - run:
          name: Lint code with black
          command: ~/.local/bin/black src/obc tests --check
      - run:
          name: Lint code with pylint
          command: ~/.local/bin/pylint src/obc tests
      - run:
          name: Lint code with bandit
          command: ~/.local/bin/bandit -qr src/obc
      - run:
          name: Lint code with pydocstyle
          command: ~/.local/bin/pydocstyle

  test:
    parameters:
      python-image:
        type: string
    docker:
      - image: cimg/<< parameters.python-image >>
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-<< parameters.python-image >>-{{ .Revision }}
      - run:
          name: Run tests
          command: ~/.local/bin/pytest

  # ---- Packaging jobs ----
  package:
    docker:
      - image: cimg/python:3.11
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      # Ensure we restore frontend production builds in Richie's static
      # directory
      - attach_workspace:
          at: ~/fun
      - run:
          name: Build python package
          command: python setup.py sdist bdist_wheel
      # Persist build packages to the workspace
      - persist_to_workspace:
          root: ~/fun
          paths:
            - dist
      # Store packages as artifacts to download/test them
      - store_artifacts:
          path: ~/fun/dist

  # Publishing to PyPI requires that:
  #   * you already registered to pypi.org
  #   * you have define both the TWINE_USERNAME & TWINE_PASSWORD secret
  #     environment variables in CircleCI UI (with your PyPI credentials)
  pypi:
    docker:
      - image: cimg/python:3.11
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      # Restore built python packages
      - attach_workspace:
          at: ~/fun
      - run:
          name: List built packages
          command: ls dist/*
      - run:
          name: Install base requirements (twine)
          command: pip install --user .[ci]
      - run:
          name: Upload built packages to PyPI
          command: ~/.local/bin/twine upload dist/*


workflows:
  version: 2

  obc:
    jobs:
      # Git jobs
      #
      # Check validity of git history
      - lint-git:
          filters:
            tags:
              only: /.*/
      # Check CHANGELOG update
      - check-changelog:
          filters:
            branches:
              ignore: main
            tags:
              only: /(?!^v).*/
      - lint-changelog:
          filters:
            branches:
              ignore: main
            tags:
              only: /.*/

      # Docker jobs
      #
      # Build images
      - build-docker:
          filters:
            tags:
              only: /.*/

      # Backend jobs
      #
      # Build, lint and test production and development Docker images
      # (debian-based)
      - build:
          matrix:
            parameters:
              python-image: [python:3.10, python:3.11]
          filters:
            tags:
              only: /.*/
      - lint:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test:
          matrix:
            parameters:
              python-image: [python:3.10, python:3.11]
          requires:
            - build
          filters:
            tags:
              only: /.*/

      # Packaging: python
      #
      # Build the python package
      - package:
          requires:
            - lint
            - test
          filters:
            tags:
              only: /.*/

      # PyPI publication.
      #
      # Publish python package to PYPI only if all build, lint and test jobs
      # succeed and it has been tagged with a tag starting with the letter v
      - pypi:
          requires:
            - package
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
